- name: Onboarding Tasks
  hosts: localhost
  become: yes
  gather_facts: no
  vars:
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Determine the user's default shell
      shell: echo "$SHELL"
      register: user_shell
    
    - name: Set CONFIG_FILE variable based on the shell
      set_fact:
        config_file: >
          {% if user_shell.stdout == '/bin/bash' %}
          ~/.bashrc
          {% elif user_shell.stdout == '/bin/zsh' %}
          ~/.zshrc
          {% else %}
          ~/.profile
          {% endif %}

    - name: Update package repository
      shell: sudo apt update
      ignore_errors: yes

    - name: Install necessary tools 
      shell: sudo apt-get install -y "{{ item }}"
      with_items:
        - gpg
        - wget
        - software-properties-common

    - name: Get the current username
      shell: echo $SUDO_USER || echo $USER
      register: current_user
      changed_when: false

    - name: Install required dependencies
      become: yes
      apt:
        name: 
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes
      ignore_errors: yes

    - name: Update the apt package index
      become: yes
      apt:
        update_cache: yes
      ignore_errors: yes


    - name: Install Podman and podman-docker
      become: yes
      become_user: "{{ current_user.stdout }}"
      shell: |
        sudo apt-get update
        sudo apt-get install -y podman
        sudo apt-get install -y podman-docker
      args:
        executable: /bin/bash
      register: podman_status

    - name: Install Git
      package:
        name: git
        state: present

    - name: Install pyenv
      become: yes
      become_user: "{{ current_user.stdout }}"
      shell: |
        curl https://pyenv.run | bash
        echo 'export PYENV_ROOT="$HOME/.pyenv"' >> {{ config_file }}
        echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> {{ config_file }}
        echo 'eval "$(pyenv init --path)"' >> {{ config_file }}
        echo 'eval "$(pyenv init -)"' >> {{ config_file }}
        echo 'eval "$(pyenv virtualenv-init -)"' >> {{ config_file }}
        source {{ config_file }}
      args:
        executable: /bin/bash
      register: pyenv_status
      ignore_errors: yes

    - name: Display pyenv installation status
      debug:
        msg: "pyenv installation status: {{ pyenv_status.stdout }}"

    - name: Install Homebrew
      become: no
      shell: |
        if ! command -v brew &> /dev/null; then
          echo "Homebrew not found. Installing Homebrew."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> {{ config_file }}
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          . {{ config_file }}
        else
          echo "Homebrew is already installed."
        fi
      args:
        executable: /bin/bash
      ignore_errors: yes

    - name: Install rupa/z and mcfly
      become: yes
      become_user: "{{ current_user.stdout }}"
      shell: |
        # Install rupa/z
        curl -fsSL https://raw.githubusercontent.com/rupa/z/master/z.sh -o ~/.z.sh
        echo 'source ~/.z.sh' >> {{ config_file }}
        
        # Install mcfly
        curl -LSfs https://raw.githubusercontent.com/cantino/mcfly/master/ci/install.sh | sudo sh -s -- --git cantino/mcfly
        echo 'eval "$(mcfly init bash)"' >> {{ config_file }}

        # Apply changes
        . {{ config_file }}
      args:
        executable: /bin/bash

    - name: Install GVM dependencies
      shell: sudo apt-get install -y "{{ item }}"
      with_items:
        - curl
        - git
        - mercurial
        - make
        - binutils
        - bison
        - gcc
        - build-essential
        - bsdmainutils 
      ignore_errors: yes

    - name: Download and install tools via shell scripts
      shell: "{{ item.pkg }}"
      loop:
        - { name: "lama2", pkg: "curl -sSL https://hexmos.com/lama2/install.sh | bash -s" }
        - { name: "python poetry", pkg: "curl -sSL https://install.python-poetry.org | python3 -" }
        - { name: "nvm", pkg: "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash -s" }
        - { name: "zotero", pkg: "curl -sSL https://raw.githubusercontent.com/retorquere/zotero-deb/master/install.sh | sudo bash" }
        - { name: "vscode", pkg: "curl -sSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg" } 
        - { name: "google chrome", pkg: "curl -sSL https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -" }
      ignore_errors : yes

    - name: Configure apt repositories
      shell: sudo add-apt-repository -y "{{ item }}"
      with_items:
        - ppa:deadsnakes/ppa
        - ppa:phoerious/keepassxc
      ignore_errors: yes

    - name: Add environment variable paths
      lineinfile:
        dest: ~/.bashrc
        line: '{{ item }}' 
      with_items:
        - export PATH="$HOME/.poetry/bin:$PATH"
        - export PATH="$HOME/.local/bin:$PATH"

    - name: Setup VS Code
      shell: |
        sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
        sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
        rm -f packages.microsoft.gpg

    - name: Setup Google Chrome
      shell: sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'

    - name: Update package repository
      shell: sudo apt update
      ignore_errors: yes
      
    - name: Install Packages
      become: yes
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - python3-apt
        - python3.10
        - python3-pip
        - git
        - keepassxc
        - zotero
        - ripgrep
        - apt-transport-https
        - code
        - google-chrome-stable
      ignore_errors : yes
      
    - name: Install NVM (Node Version Manager)
      become: yes
      become_user: "{{ current_user.stdout }}"
      shell: |
            source {{ config_file }}
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            echo 'export NVM_DIR="$HOME/.nvm"' >> {{ config_file }}
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> {{ config_file }}
            echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"' >> {{ config_file }}
            source {{ config_file }}
      args:
        executable: /bin/bash
      register: nvm_status

    - name: Display NVM installation status
      debug:
        msg: "NVM installation status: {{ nvm_status.stdout }}"

    - name: Install Python packages
      shell: pip3 install "{{ item }}"
      with_items:
        - black 
        - mypy
      ignore_errors : yes

    - name: Install VSCode extensions
      become_user: "{{ current_user.stdout }}"
      shell: code --install-extension "{{ item }}"
      with_items:
        - ms-python.python
        - formulahendry.auto-rename-tag
        - ritwickdey.LiveServer
        - kisstkondoros.vscode-gutter-preview
        - VisbyDev.folder-path-color
        - usernamehw.errorlens
        - esbenp.prettier-vscode
        - hexmos.Lama2
        - golang.Go
        - ryanluker.vscode-coverage-gutters
      ignore_errors : yes

    - name: Install GVM (Go Version Manager)
      become: yes
      become_user: "{{ current_user.stdout }}"
      shell: |
            source {{ config_file }}
            curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer | bash
            echo 'source ~/.gvm/scripts/gvm' >> {{ config_file }}
            source {{ config_file }}
      args:
        executable: /bin/bash
      register: gvm_status

    - name: Display GVM installation status
      debug:
        msg: "GVM installation status: {{ gvm_status.stdout }}"

    - name: Download Obsidian .deb package
      get_url:
        url: "https://github.com/obsidianmd/obsidian-releases/releases/download/v1.6.7/obsidian_1.6.7_amd64.deb"
        dest: "/tmp/obsidian_1.6.7_amd64.deb"

    - name: Install Obsidian .deb package
      apt:
        deb: "/tmp/obsidian_1.6.7_amd64.deb"

    - name: Ensure aliases are present in shell configuration
      become: yes
      become_user: "{{ current_user.stdout }}"
      lineinfile:
        path: ~/.bashrc
        create: yes
        line: "{{ item }}"
        state: present
      loop:
        - 'alias yi="yarn install"'
        - 'alias ya="yarn add"'
        - 'alias ys="yarn start"'
        - 'alias ni="npm install"'
        - 'alias nif="npm install --force"'
        - 'alias ns="npm start"'
        - 'alias nrs="npm run start"'
        - 'alias nrd="npm run dev"'
        - 'alias re="rm -rf node_modules/ yarn.lock package-lock.json"'
        - 'alias p="python3"'
        - 'alias pi="pip install"'
        - 'alias pmr="python3 manage.py runserver"'
        - 'alias pos="poetry shell"'
        - 'alias dp="docker ps"'
        - 'alias di="docker images"'
        - 'alias dcu="docker-compose up"'
        - 'alias ds="docker stop"'
        - 'alias drmi="docker rm image -f"'
        - 'alias dsp="docker system prune -f"'
        - 'alias dlf="docker logs -f"'
        - 'alias n2="ssh nats02"'
        - 'alias n3="ssh nats03"'
        - 'alias mas="ssh master"'
        - 'alias av3="ssh azvm03"'
        - 'alias av2="ssh azvm02"'
        - 'alias cc="cd"'
        - 'alias s="sudo"'
        - 'alias lg="lazygit"'
        - 'alias c="clear"'

    - name: Source the shell configuration file
      shell: |
        source {{ config_file }}
      args:
        executable: /bin/bash
